'''
StructReader.py

Reads a WIEN2k .struct file into an object
'''

__all__ = ['StructReader']

from wien2k.errors import UnexpectedFileFormat
from wien2k.SymmetryMatrix import SymmetryMatrix
import numpy as np

# n.b. FORMATS specified in WIEN2K user guides (2001 & 2009) don't match up to actual .struct spec!
# FORMAT statements below are taken fom the user guide
# Looser interpretation required to accommodate files generated by SGROUP, NN, w2web, st(?), ii(?)
fmt= {
    'len_title_line' : 80,                      # FORMAT(A80)
    'num_title_line' : 1,
    'len_lattice_type_line' : 80,               # FORMAT(A4,23X,I3)
    'num_lattice_type_line' : 2,
    'len_mode_line' : 80,                       # FORMAT(13X,A4)
    'num_mode_line' : 3,
    'len_lattice_parameters_line' : 80,         # FORMAT(6F10.6)
    'num_lattice_parameters_line' : 4,
    'len_atom_position_line' : 49,              # FORMAT(4X,I4,4X,F10.8,3X,F10.8,3X,F10.8)
    'len_multiplicity_line' : 37,               # FORMAT(15X,I2,17X,I2)
    'len_atomic_sphere_parameter_line' : 80,    # FORMAT(A10,5X,I5,5X,F10.8,5X,F10.5,5X,F5.2)
    'len_local_rotation_matrix_line' : 51,      # FORMAT(20X,3F10.7)
    'len_num_symmetry_operations_line' : 40,    # FORMAT(I4)
    'len_symmetry_matrix_line' : 18,            # FORMAT(3I2,F10.7)
    'len_symmetry_matrix_index_line' : 9        # FORMAT(I8)
}

class StructReader(object):
    '''Reads a WIEN2k .struct file specified in 'filename' parameter into an object

    At present, properties read include,
        lattice_type:          Lattice type, one of P, F, B, CXY, CYZ, CXZ, R, H (see table 4.4 of the WIEN2k User Guide)
        space_group_iuc:       IUC numeric representation for the space group (1-230)
        space_group_iss:       International short symbol notation for the space group (i.e. 'I4/mmm')
        units:                 Units (i.e. 'bohr' or 'ang')
        a:                     Lattice a parameter
        b:                     Lattice b parameter
        c:                     Lattice c parameter
        alpha:                 Lattice alpha angle in deg.
        beta:                  Lattice beta angle in deg.
        gamma:                 Lattice gamma angle in deg.
        is_relativistic:       True if relativistic calcs. used, False otherwise (from 'RELA' or 'NREL')
        symmetry_matrices:     A list of symmetry matrices that map irreducible
                               points in the rectangular cell to a full
                               rectangular cell
    '''

    def __init__(self, filename):
        self.filename = filename
        self.inequivelant_atoms = []
        self.symmetry_matrices = []
        self._load_values()

    def _load_values(self):
        # Populate values from the struct file
        file_handle = open(self.filename, 'r')
        line_num = 0
        for line in file_handle:
            line_num = line_num + 1
            line_len = len(line)

            if line_num == fmt['num_title_line']:
                # Nothing really of use here
                pass
            # Parse line containing space groups and lattice type
            elif line_num == fmt['num_lattice_type_line']:
                # SGROUP generated struct has different format to other .struct
                # files, require strange parsing of space groups
                # n.b. do not save 'number of inequiv atoms', just use len(self.inequiv_atoms)
                self.lattice_type = line[:4].strip() # One of P, F, B, CXY, CYZ, CXZ, R, H
                space_group_txt = line[30:].strip()
                try:
                    self.space_group_iuc = int(space_group_txt[:3])
                except:
                    self.space_group_iuc = None
                self.space_group_iss = space_group_txt[4:]
            # Parse the lien containing units used and whether calcs were relativistic or not
            elif line_num == fmt['num_mode_line']:
                self.units = line[23:].strip()
                if line[13:17] == 'RELA':
                    self.is_relativistic = True
                elif line[13:17] == 'NREL':
                    self.is_relativistic = False
                else:
                    self.is_relativistic = None
            # Parse line which contains lattice paramaters
            elif line_num == fmt['num_lattice_parameters_line']:
                try:
                    self.a, self.b, self.c, self.alpha, self.beta, self.gamma = \
                        [float(num.strip()) for num in line.split(' ') if num.strip() != '']
                except:
                    raise UnexpectedFileFormat('Line identified as containing lattice parameters could not be parsed (line: %d)' % line_num)
            # Prase the line containing atomic positions
            elif line_len == fmt['len_atom_position_line']:
                # TODO
                pass

            elif line_len == fmt['len_multiplicity_line']:
                # TODO
                pass

            elif line_len == fmt['len_local_rotation_matrix_line']:
                # TODO
                pass

            elif line_len == fmt['len_num_symmetry_operations_line']:
                # Redundant, can use len(self.symmetry_matrices)
                pass

            elif line_len == fmt['len_symmetry_matrix_line']:
                sm = SymmetryMatrix()
                line1 = line
                try:
                    line2 = file_handle.next()
                    line_num = line_num + 1
                    line3 = file_handle.next()
                    line_num = line_num + 1
                    for i,l in enumerate([line1, line2, line3]):
                        sm.matrix[i,:] = np.array([float(l[j:j+2]) for j in [0, 2, 4]])
                        sm.tau_offsets[i] = float(l.strip()[6:])
                except StopIteration:
                    break
                except ValueError:
                    raise UnexpectedFileFormat('Could not parse the symmetry matrix from file (line: %d)' % line_num)
                self.symmetry_matrices.append(sm)

            elif line_len == fmt['len_symmetry_matrix_index_line']:
                try:
                    # If a symmetry matrix id is found, append it to the last
                    # stored symmetry matrix
                    self.symmetry_matrices[-1].id = int(line.strip())
                except:
                    pass

        file_handle.close()
