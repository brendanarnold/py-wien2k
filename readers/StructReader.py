'''
StructReader.py

Reads a WIEN2k .struct file into an object
'''

__all__ = ['StructReader']

from wien2k.errors import UnexpectedFileFormat

# n.b. FORMATS specified in WIEN2K user guides (2001 & 2009) don't match up to actual .struct spec!
# FORMAT statements below are taken fom the user guide
# Looser interpretation required to accommodate files generated by SGROUP, NN, w2web, st(?), ii(?)
fmt= {
    'len_title_line' 79,                        # FORMAT(A80)
    'num_title_line', 1,
    'len_lattice_type_line' : 79,               # FORMAT(A4,23X,I3)
    'num_lattice_type_line' : 2,
    'len_mode_line' : 79,                       # FORMAT(13X,A4)
    'num_mode_line' : 3,
    'len_lattice_parameters_line' : 79,         # FORMAT(6F10.6)
    'num_lattice_parameters_line' : 4,
    'len_atom_position_line' : 48,              # FORMAT(4X,I4,4X,F10.8,3X,F10.8,3X,F10.8)
    'len_multiplicity_line' : 36,               # FORMAT(15X,I2,17X,I2)
    'len_atomic_sphere_parameter_line' : 79,    # FORMAT(A10,5X,I5,5X,F10.8,5X,F10.5,5X,F5.2)
    'len_local_rotation_matrix_line' : 50,      # FORMAT(20X,3F10.7)
    'len_num_symmetry_operations_line' : 39,    # FORMAT(I4)
    'len_symmetry_matrix_line' : 17,            # FORMAT(3I2,F10.7)
    'len_symmetry_matrix_index_line' : 8        # FORMAT(I8)
}

class StructReader(object):
    '''Reads a WIEN2k .struct file specified in 'filename' parameter into an object

    At present, properties read include,
        lattice_type:   Single letter lattice type specified
        space_group:    Textual space group (i.e. 'I4/mmm')
        units:          Units (i.e. 'bohr')
        a:              Lattice a parameter
        b:              Lattice b parameter
        c:              Lattice c parameter
        alpha:          Lattice alpha angle
        beta:           Lattice beta angle
        gamma:          Lattice gamma angle
    '''

    def __init__(self, filename):
        self.filename = filename
        # Populate values from the struct file
        file_handle = open(self.filename, 'r')
        line_num = 0
        for line in file_handle:
            line_num = line_num + 1
            line_len = len(line)

            if line_num == fmt['num_title_line']:
                # Nothing really of use here
                pass

            elif line_num == fmt['num_lattice_type_line']:
                self.lattice_type = line[:4].strip() # One of P, F, B, CXY, CYZ, CXZ, R, H
                self.space_group = line.split(':')[-1].strip().split('_')[1] # Space group textual representation

            elif line_num == fmt['num_mode_line']:
                pass

            elif line_num == fmt['num_lattice_parameters_line']:
                try:
                    self.a, self.b, self.c, self.alpha, self.beta, self.gamma = \
                        [float(num.strip()) for num in line.split(' ') if num.strip() != '']
                except:
                    raise UnexpectedFileFormat('Line idetified as containing lattice parameters could not be parsed (line: %d)' % line_num)

            elif line_len == fmt['len_atom_position_line']:
                pass

            elif line_len == fmt['len_multiplicity_line']:
                pass

            elif line_len == fmt['len_local_rotation_matrix_line']:
                pass

            elif line_len == fmt['len_num_symmetry_operations_line']:
                pass

            elif line_len == fmt['len_symmetry_matrix_line']:
                pass

            elif line_len == fmt['len_symmetry_matrix_index_line']:
                pass

            else:
                pass


            elif line_num == fmt['units_line']:
                self.units = line.split('=')[-1].strip()
            elif line_num == fmt['lattice_parameters_line']:
            elif len(line) == fmt['length_symmetry_matrix_line']:

        # TODO: Rest of parsing
        file_handle.close()
