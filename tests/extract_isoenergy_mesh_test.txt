>>> from wien2k.utils import extract_isoenergy_mesh
>>> import wien2k
>>> import numpy as np

Create an array that represents a single peak

>>> peak = np.array([[ 1., 0.,  0.,  0.,  0.],
...       [ 2., 1.,  0.,  0.,  1.],
...       [ 3., 2.,  0.,  0.,  0.]])
>>> km = wien2k.Kmesh(peak)
>>> extract_isoenergy_mesh(km, 0.5)
array([[ 0.5,  0. ,  0. ],
       [ 1.5,  0. ,  0. ]])

Create an array that represents a pyramid

>>> pyramid = np.array([[ 1., 0.,  0.,  0.,  0.],
...       [ 2., 0.,  1.,  0.,  0.],
...       [ 3., 0.,  2.,  0.,  0.],
...       [ 4., 1.,  0.,  0.,  0.],
...       [ 5., 1.,  1.,  0.,  1.],
...       [ 6., 1.,  2.,  0.,  0.],
...       [ 7., 2.,  0.,  0.,  0.],
...       [ 8., 2.,  1.,  0.,  0.],
...       [ 9., 2.,  2.,  0.,  0.]])
>>> km = wien2k.Kmesh(pyramid)
>>> extract_isoenergy_mesh(km, 0.5)
array([[ 0.5,  1. ,  0. ],
       [ 1.5,  1. ,  0. ],
       [ 1. ,  0.5,  0. ],
       [ 1. ,  1.5,  0. ]])

Create an array that represents a cube

>>> cube = np.array([[ 1., 0.,  0.,  0.,  0.],
...       [ 2., 0.,  1.,  0.,  0.],
...       [ 3., 0.,  2.,  0.,  0.],
...       [ 4., 1.,  0.,  0.,  0.],
...       [ 5., 1.,  1.,  0.,  0.],
...       [ 6., 1.,  2.,  0.,  0.],
...       [ 7., 2.,  0.,  0.,  0.],
...       [ 8., 2.,  1.,  0.,  0.],
...       [ 9., 2.,  2.,  0.,  0.],
...       [ 10., 0.,  0.,  1.,  0.],
...       [ 11., 0.,  1.,  1.,  0.],
...       [ 12., 0.,  2.,  1.,  0.],
...       [ 13., 1.,  0.,  1.,  0.],
...       [ 14., 1.,  1.,  1.,  1.],
...       [ 15., 1.,  2.,  1.,  0.],
...       [ 16., 2.,  0.,  1.,  0.],
...       [ 17., 2.,  1.,  1.,  0.],
...       [ 18., 2.,  2.,  1.,  0.],
...       [ 19., 0.,  0.,  2.,  0.],
...       [ 20., 0.,  1.,  2.,  0.],
...       [ 21., 0.,  2.,  2.,  0.],
...       [ 22., 1.,  0.,  2.,  0.],
...       [ 23., 1.,  1.,  2.,  0.],
...       [ 24., 1.,  2.,  2.,  0.],
...       [ 25., 2.,  0.,  2.,  0.],
...       [ 26., 2.,  1.,  2.,  0.],
...       [ 27., 2.,  2.,  2.,  0.]])
>>> km = wien2k.Kmesh(cube)
>>> extract_isoenergy_mesh(km, 0.5)
array([[ 0.5,  1. ,  1. ],
       [ 1.5,  1. ,  1. ],
       [ 1. ,  0.5,  1. ],
       [ 1. ,  1.5,  1. ],
       [ 1. ,  1. ,  0.5],
       [ 1. ,  1. ,  1.5]])



>>> import numpy as np
>>> energy_data = np.zeros((1000, 5))
>>> id = 0
>>> for i in xrange(10):
...     for j in xrange(10):
...         for k in xrange(10):
...             energy_data[id,:] = [id+1, i, j, k, np.sqrt((i-4.5)**2 + (j-4.5)**2 + (k-4.5)**2)]
...             id = id + 1
>>> km = wien2k.Kmesh(energy_data)
>>> klist = extract_isoenergy_mesh(km, 3.5)
>>> distances = []
>>> for k in klist:
...     distances.append(np.sqrt((k[0]-4.5)**2 + (k[1]-4.5)**2 + (k[2]-4.5)**2))
>>> (3.5 - np.array(distances).mean()) < 1.0
    True 
